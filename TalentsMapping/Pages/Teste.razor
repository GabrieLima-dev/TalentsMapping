@page "/teste"
@inject PerguntaService PerguntaService

<h3 class="text-center">Teste Vocacional</h3>

@if (perguntas == null)
{
    <p>Carregando perguntas...</p>
}
else if (indicePerguntaAtual >= perguntas.Count)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 80vh;">
        <MudAlert Severity="Severity.Normal" Square="true" Class="my-2" Style="font-size: 2em; border: hidden; background-color: darkslateblue; color: white; padding: 20px; max-width: 600px;">
            <p>Questionário finalizado. Aqui estão os cursos recomendados para você:</p>
            <ul>
                @foreach (var curso in cursosRecomendados)
                {
                    <li>@curso</li>
                }
            </ul>
        </MudAlert>
    </div>
}
else
{
    <MudPaper Class="d-flex flex-column align-items-center justify-content-center" Style="height: 80vh;">
        <!-- Colocando os botões de zoom no canto superior direito -->
        <div class="zoom-buttons">
            <MudIconButton Icon="@Icons.Material.Filled.ZoomIn" OnClick="AumentarFonte" Color="Color.Primary" Size="Size.Large" />
            <MudIconButton Icon="@Icons.Material.Filled.ZoomOut" OnClick="DiminuirFonte" Color="Color.Primary" Size="Size.Large" />
        </div>

        <div class="text-center">
            <!-- Aumentando o tamanho da fonte da pergunta -->
            <p class="mb-4" Style=@($"font-size: {tamanhoFonte + 10}px;")>
                @perguntas[indicePerguntaAtual].Texto
            </p>

            <EditForm Model="this" OnValidSubmit="ProximaPergunta">
                <!-- Mudando o tamanho da fonte das alternativas com uma classe CSS personalizada -->
                <MudRadioGroup @bind-Value="respostaAtual" Color="Color.Primary" Dense="true" Class="mt-3 font-alternativas">
                    @foreach (var alternativa in perguntas[indicePerguntaAtual].Alternativas)
                    {
                        <MudRadio Value="@alternativa.Valor" Color="Color.Primary">
                            @alternativa.Texto
                        </MudRadio>
                    }
                </MudRadioGroup>

                <!-- Aumentando o tamanho do botão Próxima -->
                <MudButton Disabled="!respostaSelecionada" OnClick="ProximaPergunta" Color="Color.Primary" Class="mt-4" FullWidth="true" Style=@($"font-size: {tamanhoFonte + 8}px; padding: 12px 0;")>
                    Próxima
                </MudButton>
            </EditForm>
        </div>
    </MudPaper>
}

<style>
    /* Estilos para posicionar os ícones no canto superior direito */
    .zoom-buttons {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 10;
    }

    /* Classe CSS personalizada para o tamanho da fonte das alternativas */
    .font-alternativas .mud-radio-content {
        font-size: calc(18px + @((tamanhoFonte - 18) / 2)px); /* Ajusta o tamanho da fonte */
    }
</style>

@code {
    private List<Pergunta> perguntas;
    private Dictionary<int, string> respostas = new Dictionary<int, string>();
    private int indicePerguntaAtual = 0;
    private string respostaAtual;
    private List<string> cursosRecomendados = new List<string>();
    private bool respostaSelecionada => !string.IsNullOrEmpty(respostaAtual);

    // Variável para controlar o tamanho da fonte
    private int tamanhoFonte = 18;

    protected override async Task OnInitializedAsync()
    {
        perguntas = await PerguntaService.GetPerguntasAsync();

        // Inicializa o dicionário de respostas com IDs de pergunta e valor padrão
        foreach (var pergunta in perguntas)
        {
            respostas[pergunta.Id] = null;
        }
    }

    private void ProximaPergunta()
    {
        // Salva a resposta para a pergunta atual
        respostas[perguntas[indicePerguntaAtual].Id] = respostaAtual;

        // Reseta a resposta atual para que o usuário precise selecionar uma nova resposta
        respostaAtual = null;

        // Avança para a próxima pergunta
        indicePerguntaAtual++;

        // Se todas as perguntas foram respondidas, calcula os cursos recomendados
        if (indicePerguntaAtual >= perguntas.Count)
        {
            CalcularCursosRecomendados();
        }
    }

    private void CalcularCursosRecomendados()
    {
        // Dicionário para contar a frequência de cada curso
        var cursosCount = new Dictionary<string, int>();

        foreach (var resposta in respostas)
        {
            var pergunta = perguntas.FirstOrDefault(p => p.Id == resposta.Key);
            var alternativa = pergunta?.Alternativas.FirstOrDefault(a => a.Valor == resposta.Value);

            if (alternativa != null)
            {
                foreach (var curso in alternativa.Cursos)
                {
                    if (cursosCount.ContainsKey(curso))
                    {
                        cursosCount[curso]++;
                    }
                    else
                    {
                        cursosCount[curso] = 1;
                    }
                }
            }
        }

        // Ordena os cursos por frequência e seleciona os 3 principais
        cursosRecomendados = cursosCount.OrderByDescending(c => c.Value)
                                        .Take(3)
                                        .Select(c => c.Key)
                                        .ToList();
    }

    // Função para aumentar o tamanho da fonte
    private void AumentarFonte()
    {
        if (tamanhoFonte < 30)
        {
            tamanhoFonte += 2;
        }
    }

    // Função para diminuir o tamanho da fonte
    private void DiminuirFonte()
    {
        if (tamanhoFonte > 12)
        {
            tamanhoFonte -= 2;
        }
    }
}
