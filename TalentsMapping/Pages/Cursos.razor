@page "/cursos"
@inject CursoService CursoService
@inject IJSRuntime JSRuntime

<PageTitle>Cursos</PageTitle>

<link rel="stylesheet" href="./css/Cursos.css" />

<div class="top-right-icons">
    <MudIconButton Icon="@Icons.Material.Filled.ZoomIn" OnClick="AumentarFonte" Color="Color.Primary" Size="Size.Large" />
    <MudIconButton Icon="@Icons.Material.Filled.ZoomOut" OnClick="DiminuirFonte" Color="Color.Primary" Size="Size.Large" />
    <MudIconButton Icon="@darkModeIcon" OnClick="ToggleDarkMode" Color="Color.Primary" Size="Size.Large" />
</div>

<div class="search-bar">
    <MudTextField @bind-Value="_searchString"
                  Placeholder="Nome do Curso ou Nota de Corte"
                  Adornment="Adornment.Start"
                  Immediate="true"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  IconSize="Size.Medium"
                  Class="mt-0"
                  OnBlur="FiltrarCursos" />
</div>

<div class="courses-grid" style="font-size: @tamanhoFontePx;">
    @if (cursosFiltrados.Any())
    {
        @foreach (var curso in cursosFiltrados.Take(itensCarregados))
        {
            <div class="course-card @(cursoSelecionadoId == curso.id ? "expanded" : "")">
                <div class="card-header">
                    <h3>@curso.nome</h3>
                    <MudIconButton Icon="@GetIcon(curso.id)" OnClick="() => ToggleDetails(curso.id)" Color="Color.Primary" Size="Size.Small" />
                </div>
                <p>@curso.descricao</p>

                @if (curso.id == cursoSelecionadoId)
                {
                    <div class="expanded-details">
                        <p><strong>Tarefas Diárias:</strong> @curso.tarefas_diarias</p>
                        <p><strong>Ambiente de Trabalho:</strong> @curso.ambiente_trabalho</p>
                        <p><strong>Faixa Salarial:</strong> @curso.faixa_salarial</p>
                        <p><strong>Nota de Corte ENEM 2023:</strong> @curso.media_corte</p>
                    </div>
                }
            </div>
        }
    }
    else
    {
        <p class="no-results">Nenhum curso encontrado.</p>
    }
</div>

@if (itensCarregados < cursosFiltrados.Count)
{
    <MudButton Variant="Variant.Outlined" OnClick="CarregarMaisCursos" Color="Color.Primary" Class="load-more-btn">
        Carregar Mais
    </MudButton>
}

@code {
    private List<Curso> cursos = new List<Curso>();
    private List<Curso> cursosFiltrados = new List<Curso>();
    private string _searchString = string.Empty;
    private int? cursoSelecionadoId = null;
    private bool isDarkMode = false;
    private int tamanhoFonte = 20;
    private int itensCarregados = 10;

    private string tamanhoFontePx => $"{tamanhoFonte}px";
    private string darkModeIcon => isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode;

    protected override async Task OnInitializedAsync()
    {
        cursos = await CursoService.GetCursosAsync();
        FiltrarCursos();
    }

    private void AumentarFonte()
    {
        if (tamanhoFonte < 30)
        {
            tamanhoFonte += 2;
        }
    }

    private void DiminuirFonte()
    {
        if (tamanhoFonte > 10)
        {
            tamanhoFonte -= 2;
        }
    }

    private void ToggleDetails(int cursoId)
    {
        // Alterna entre expandir e recolher o curso clicado
        cursoSelecionadoId = cursoSelecionadoId == cursoId ? null : cursoId;
    }

    private string GetIcon(int cursoId)
    {
        return cursoSelecionadoId == cursoId
            ? Icons.Material.Filled.ExpandLess // Ícone de seta para cima
            : Icons.Material.Filled.ExpandMore; // Ícone de seta para baixo
    }

    private void CarregarMaisCursos()
    {
        itensCarregados += 10;
    }

    private void FiltrarCursos()
    {
        // Filtro dos cursos
        cursosFiltrados = cursos
            .Where(c => string.IsNullOrWhiteSpace(_searchString) ||
                        c.nome.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||  // Filtro por nome
                        c.media_corte.ToString().Contains(_searchString))  // Filtro por media_corte
            .ToList();

        // Resetar a quantidade de itens carregados após o filtro
        itensCarregados = 10;
    }

    private async Task ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        var modeClass = isDarkMode ? "dark-mode" : string.Empty;
        await JSRuntime.InvokeVoidAsync("document.documentElement.setAttribute", "class", modeClass);
    }
}
