@page "/"
@layout LoginLayout
@inject NavigationManager NavigationManager
@inject UsuarioService UsuarioService

<PageTitle>Login - TalentsMapping</PageTitle>

<style>
    /* Configuração do layout para garantir que o footer fique no fim da página */
    html, body {
        height: 100%;
        margin: 0;
        display: flex;
        flex-direction: column;
    }

    main {
        flex: 1;
    }

    .login-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background: linear-gradient(135deg, #1e3c72, #2a5298); /* Fundo gradiente */
    }

    .logo {
        width: 200px;
        margin-bottom: 20px;
    }

    .login-content {
        display: flex;
        justify-content: center;
        gap: 30px;
    }

    footer {
        text-align: center;
        padding: 1px;
        color: #6c757d;
        position: fixed;
        bottom: 0;
        width: 80%;
    }

    .top-right-icons {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 10;
    }
</style>

<div class="top-right-icons">
    <MudIconButton Icon="@Icons.Material.Filled.ZoomIn" OnClick="AumentarFonte" Color="Color.Primary" Size="Size.Large" />
    <MudIconButton Icon="@Icons.Material.Filled.ZoomOut" OnClick="DiminuirFonte" Color="Color.Primary" Size="Size.Large" />
</div>

<main class="login-container" style="font-size: @tamanhoFontePx; background: white">
    <!-- Logo TalentsMapping -->
    <img src="/logoTalentsMapping.png" alt="TalentsMapping Logo" class="logo" />

    <!-- Conteúdo de Login e Inscrição -->
    <div class="login-content">
        <!-- Quadrado de Login -->
        <MudPaper Elevation="10" Class="p-4" Style="width: 300px;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Login</MudText>
            <MudTextField @bind-Value="usuarioLogin" Label="Nome de Usuário" Variant="Variant.Filled" FullWidth="true" />
            <MudTextField @bind-Value="senhaLogin" Label="Senha" Variant="Variant.Filled" FullWidth="true" InputType="InputType.Password" />
            <MudButton OnClick="FazerLogin" Color="Color.Primary" FullWidth="true" Class="mt-4">Entrar</MudButton>
            @if (!string.IsNullOrEmpty(mensagemErroLogin))
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">
                    @mensagemErroLogin
                </MudAlert>
            }
        </MudPaper>

        <!-- Quadrado de Inscrição -->
        <MudPaper Elevation="10" Class="p-4" Style="width: 300px;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Inscrição</MudText>
            <MudTextField @bind-Value="usuarioCadastro" Label="Nome de Usuário" Variant="Variant.Filled" FullWidth="true" />
            <MudTextField @bind-Value="senhaCadastro" Label="Senha" Variant="Variant.Filled" FullWidth="true" InputType="InputType.Password" />
            <MudButton OnClick="FazerCadastro" Color="Color.Primary" FullWidth="true" Class="mt-4">Inscreva-se</MudButton>

            @if (!string.IsNullOrEmpty(mensagemErroCadastro))
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">
                    @mensagemErroCadastro
                </MudAlert>
            }
            @if (!string.IsNullOrEmpty(mensagemSucessoCadastro))
            {
                <MudAlert Severity="Severity.Success" Class="mt-2">
                    @mensagemSucessoCadastro
                </MudAlert>
            }
        </MudPaper>
    </div>
</main>

@code {
    private int tamanhoFonte = 20;
    private string tamanhoFontePx => $"{tamanhoFonte}px";

    private string usuarioLogin;
    private string senhaLogin;
    private string usuarioCadastro;
    private string senhaCadastro;
    private string mensagemErroLogin;
    private string mensagemErroCadastro;
    private string mensagemSucessoCadastro;

    private void AumentarFonte()
    {
        if (tamanhoFonte < 40) // Limita o tamanho máximo
        {
            tamanhoFonte += 2;
        }
    }

    private void DiminuirFonte()
    {
        if (tamanhoFonte > 20) // Limita o tamanho mínimo
        {
            tamanhoFonte -= 2;
        }
    }

    private async Task FazerLogin()
    {
        bool sucesso = await UsuarioService.FazerLoginAsync(usuarioLogin, senhaLogin);
        if (sucesso)
        {
            mensagemErroLogin = null;
            NavigationManager.NavigateTo("/home"); // Redireciona para a página Home após o login
        }
        else
        {
            mensagemErroLogin = "Usuário ou senha incorretos!";
        }
    }

    private async Task FazerCadastro()
    {
        bool usuarioExiste = await UsuarioService.VerificarUsuarioExistenteAsync(usuarioCadastro);

        if (usuarioExiste)
        {
            mensagemErroCadastro = "Nome de usuário já existe!";
            mensagemSucessoCadastro = null;
        }
        else
        {
            bool sucesso = await UsuarioService.FazerCadastroAsync(usuarioCadastro, senhaCadastro);
            if (sucesso)
            {
                mensagemErroCadastro = null;
                mensagemSucessoCadastro = "Usuário criado com sucesso!";
                usuarioCadastro = string.Empty;
                senhaCadastro = string.Empty;
            }
            else
            {
                mensagemErroCadastro = "Erro ao criar usuário!";
                mensagemSucessoCadastro = null;
            }
        }
    }
}