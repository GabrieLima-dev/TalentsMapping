// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinhaApi.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MinhaApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MinhaApi.Models.Alternativa", b =>
                {
                    b.Property<int>("id_alternativa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_alternativa"));

                    b.Property<int>("PerguntaId")
                        .HasColumnType("integer");

                    b.Property<string>("TextoAlternativa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Valor")
                        .HasColumnType("integer");

                    b.HasKey("id_alternativa");

                    b.HasIndex("PerguntaId");

                    b.ToTable("alternativa", "public");
                });

            modelBuilder.Entity("MinhaApi.Models.Curso", b =>
                {
                    b.Property<int>("id_curso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_curso"));

                    b.Property<string>("AmbienteTrabalho")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FaixaSalarial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("MediaCorte")
                        .HasColumnType("numeric");

                    b.Property<string>("NomeCurso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TarefasDiarias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_curso");

                    b.ToTable("curso", "public");
                });

            modelBuilder.Entity("MinhaApi.Models.Pergunta", b =>
                {
                    b.Property<int>("id_pergunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_pergunta"));

                    b.Property<string>("TextoPergunta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_pergunta");

                    b.ToTable("pergunta", "public");
                });

            modelBuilder.Entity("MinhaApi.Models.Recomendacao", b =>
                {
                    b.Property<int>("id_recomendacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_recomendacao"));

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<int>("TesteId")
                        .HasColumnType("integer");

                    b.HasKey("id_recomendacao");

                    b.HasIndex("CursoId");

                    b.HasIndex("TesteId");

                    b.ToTable("recomendacao", "public");
                });

            modelBuilder.Entity("MinhaApi.Models.Resposta", b =>
                {
                    b.Property<int>("id_resposta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_resposta"));

                    b.Property<int>("AlternativaId")
                        .HasColumnType("integer");

                    b.Property<int>("PerguntaId")
                        .HasColumnType("integer");

                    b.Property<int?>("Testeid_teste")
                        .HasColumnType("integer");

                    b.HasKey("id_resposta");

                    b.HasIndex("AlternativaId");

                    b.HasIndex("PerguntaId");

                    b.HasIndex("Testeid_teste");

                    b.ToTable("resposta", "public");
                });

            modelBuilder.Entity("MinhaApi.Models.RespostaAlternativa", b =>
                {
                    b.Property<int>("IdResposta")
                        .HasColumnType("integer");

                    b.Property<int>("IdAlternativa")
                        .HasColumnType("integer");

                    b.Property<int>("Alternativaid_alternativa")
                        .HasColumnType("integer");

                    b.Property<int>("Respostaid_resposta")
                        .HasColumnType("integer");

                    b.HasKey("IdResposta", "IdAlternativa");

                    b.HasIndex("Alternativaid_alternativa");

                    b.HasIndex("Respostaid_resposta");

                    b.ToTable("resposta_alternativa", "public");
                });

            modelBuilder.Entity("MinhaApi.Models.Teste", b =>
                {
                    b.Property<int>("id_teste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_teste"));

                    b.Property<DateTime>("DataRealizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("id_teste");

                    b.HasIndex("UsuarioId");

                    b.ToTable("teste", "public");
                });

            modelBuilder.Entity("MinhaApi.Models.Usuario", b =>
                {
                    b.Property<int>("id_usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_usuario"));

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_usuario");

                    b.ToTable("usuario", "public");
                });

            modelBuilder.Entity("MinhaApi.Models.Alternativa", b =>
                {
                    b.HasOne("MinhaApi.Models.Pergunta", "Pergunta")
                        .WithMany("Alternativas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("MinhaApi.Models.Recomendacao", b =>
                {
                    b.HasOne("MinhaApi.Models.Curso", "Curso")
                        .WithMany("Recomendacoes")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaApi.Models.Teste", "Teste")
                        .WithMany("Recomendacoes")
                        .HasForeignKey("TesteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Teste");
                });

            modelBuilder.Entity("MinhaApi.Models.Resposta", b =>
                {
                    b.HasOne("MinhaApi.Models.Alternativa", "Alternativa")
                        .WithMany()
                        .HasForeignKey("AlternativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaApi.Models.Pergunta", "Pergunta")
                        .WithMany()
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaApi.Models.Teste", null)
                        .WithMany("Respostas")
                        .HasForeignKey("Testeid_teste");

                    b.Navigation("Alternativa");

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("MinhaApi.Models.RespostaAlternativa", b =>
                {
                    b.HasOne("MinhaApi.Models.Alternativa", "Alternativa")
                        .WithMany()
                        .HasForeignKey("Alternativaid_alternativa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaApi.Models.Resposta", "Resposta")
                        .WithMany()
                        .HasForeignKey("Respostaid_resposta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alternativa");

                    b.Navigation("Resposta");
                });

            modelBuilder.Entity("MinhaApi.Models.Teste", b =>
                {
                    b.HasOne("MinhaApi.Models.Usuario", "Usuario")
                        .WithMany("Testes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MinhaApi.Models.Curso", b =>
                {
                    b.Navigation("Recomendacoes");
                });

            modelBuilder.Entity("MinhaApi.Models.Pergunta", b =>
                {
                    b.Navigation("Alternativas");
                });

            modelBuilder.Entity("MinhaApi.Models.Teste", b =>
                {
                    b.Navigation("Recomendacoes");

                    b.Navigation("Respostas");
                });

            modelBuilder.Entity("MinhaApi.Models.Usuario", b =>
                {
                    b.Navigation("Testes");
                });
#pragma warning restore 612, 618
        }
    }
}
